# Results
summary_results <- data.frame(
Total_Long_Trades = long_trades,
Total_Short_Trades = short_trades,
Percent_Long = percent_long,
Percent_Short = percent_short,
Cumulative_Return = cumulative_return
)
# Plot the cumulative returns (explicitly print the plot)
cumulative_equity_curve <- exp(cumsum(strategy_returns))
# Print the plot explicitly
plot(cumulative_equity_curve, type = "l", col = "blue",
main = "Cumulative Return from SMA Strategy",
xlab = "Time", ylab = "Cumulative Return")
return(summary_results)
}
# Example: Run backtest for "JNJ" from 2014-01-01 to 2017-12-31 with default DVI threshold of 0.5
results <- base_level_backtest("JNJ", "2014-01-01", "2017-12-31", 0.5)
print(results)
# Plot equity curve
cumulative_equity_curve <- exp(cumsum(strategy_returns))
# Plot equity curve
cumulative_equity_curve <- exp(cumsum(strategy_returns))
source("~/FINC-Assignment-2-Trading-Rule-Back-Testing/Function 1.R")
# Load necessary libraries
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library(ggplot2)
# Function to get stock data
get_stock_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
# Function for Base Level Backtest
base_level_backtest <- function(ticker, start_date, end_date, dvi_threshold = 0.5) {
# Load data
price_data <- get_stock_data(ticker, start_date, end_date)
# Calculate DVI (using RSI as a proxy)
dvi <- RSI(Cl(price_data), n = 14) / 100  # Normalize RSI to [0,1]
# Create trading signal (1 for long, -1 for short)
signal <- Lag(ifelse(dvi < dvi_threshold, 1, -1))  # Lag to avoid look-ahead bias
# Calculate daily returns and strategy returns
daily_returns <- ROC(Cl(price_data))
strategy_returns <- daily_returns * signal
strategy_returns <- na.omit(strategy_returns)
# Summary statistics
long_trades <- sum(signal == 1, na.rm = TRUE)
short_trades <- sum(signal == -1, na.rm = TRUE)
percent_long <- mean(signal == 1, na.rm = TRUE) * 100
percent_short <- mean(signal == -1, na.rm = TRUE) * 100
cumulative_return <- prod(1 + strategy_returns) - 1
# Results
summary_results <- data.frame(
Total_Long_Trades = long_trades,
Total_Short_Trades = short_trades,
Percent_Long = percent_long,
Percent_Short = percent_short,
Cumulative_Return = cumulative_return
)
# Plot equity curve
cumulative_equity_curve <- exp(cumsum(strategy_returns))
plot(cumulative_equity_curve, type = "l", col = "blue",
main = "Cumulative Return from SMA Strategy",
xlab = "Time", ylab = "Cumulative Return")
return(summary_results)
}
results <- base_level_backtest("JNJ", "2014-01-01", "2017-12-31", 0.5)
print(results)
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library(ggplot2)
# Function to get stock data
get_stock_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
# Function for Base Level Backtest
base_level_backtest <- function(ticker, start_date, end_date, dvi_threshold = 0.5) {
# Load data
price_data <- get_stock_data(ticker, start_date, end_date)
# Calculate DVI (using RSI as a proxy)
dvi <- RSI(Cl(price_data), n = 14) / 100  # Normalize RSI to [0,1]
# Create trading signal (1 for long, -1 for short)
signal <- Lag(ifelse(dvi < dvi_threshold, 1, -1))  # Lag to avoid look-ahead bias
# Calculate daily returns and strategy returns
daily_returns <- ROC(Cl(price_data))
strategy_returns <- daily_returns * signal
strategy_returns <- na.omit(strategy_returns)
# Summary statistics
long_trades <- sum(signal == 1, na.rm = TRUE)
short_trades <- sum(signal == -1, na.rm = TRUE)
percent_long <- mean(signal == 1, na.rm = TRUE) * 100
percent_short <- mean(signal == -1, na.rm = TRUE) * 100
cumulative_return <- prod(1 + strategy_returns) - 1
# Results
summary_results <- data.frame(
Total_Long_Trades = long_trades,
Total_Short_Trades = short_trades,
Percent_Long = percent_long,
Percent_Short = percent_short,
Cumulative_Return = cumulative_return
)
# Plot equity curve
cumulative_equity_curve <- exp(cumsum(strategy_returns))
plot(cumulative_equity_curve, type = "l", col = "blue",
main = "Cumulative Return from SMA Strategy",
xlab = "Time", ylab = "Cumulative Return")
return(summary_results)
}
# Example: Run backtest for "JNJ" from 2014-01-01 to 2017-12-31 with default DVI threshold of 0.5
results <- base_level_backtest("JNJ", "2014-01-01", "2017-12-31", 0.5)
print(results)
# Load necessary libraries
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library(ggplot2)
# Function to get stock data
get_stock_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
# Function for Base Level Backtest
base_level_backtest <- function(ticker, start_date, end_date, dvi_threshold = 0.5) {
# Load data
price_data <- get_stock_data(ticker, start_date, end_date)
# Calculate DVI (using RSI as a proxy)
dvi <- RSI(Cl(price_data), n = 14) / 100  # Normalize RSI to [0,1]
# Create trading signal (1 for long, -1 for short)
signal <- Lag(ifelse(dvi < dvi_threshold, 1, -1))  # Lag to avoid look-ahead bias
# Calculate daily returns and strategy returns
daily_returns <- ROC(Cl(price_data))
strategy_returns <- daily_returns * signal
strategy_returns <- na.omit(strategy_returns)
# Summary statistics
long_trades <- sum(signal == 1, na.rm = TRUE)
short_trades <- sum(signal == -1, na.rm = TRUE)
percent_long <- mean(signal == 1, na.rm = TRUE) * 100
percent_short <- mean(signal == -1, na.rm = TRUE) * 100
cumulative_return <- prod(1 + strategy_returns) - 1
# Results
summary_results <- data.frame(
Total_Long_Trades = long_trades,
Total_Short_Trades = short_trades,
Percent_Long = percent_long,
Percent_Short = percent_short,
Cumulative_Return = cumulative_return
)
# Plot equity curve
cumulative_equity_curve <- exp(cumsum(strategy_returns))
# Explicitly print the plot to ensure it is displayed
print(plot(cumulative_equity_curve, type = "l", col = "blue",
main = "Cumulative Return from SMA Strategy",
xlab = "Time", ylab = "Cumulative Return"))
return(summary_results)
}
# Example: Run backtest for "JNJ" from 2014-01-01 to 2017-12-31 with default DVI threshold of 0.5
results <- base_level_backtest("JNJ", "2014-01-01", "2017-12-31", 0.5)
print(results)
# Function 2: Simulate Multiple Backtest Periods
simulate_multiple_backtests <- function(ticker, testing_period, date_range, dvi_threshold = 0.5) {
# Extract start and end years from date_range
start_year <- as.numeric(date_range[1])
end_year <- as.numeric(date_range[2])
# Create an empty list to store the results from each period
all_results <- list()
# Create a vector to store cumulative returns for plotting
cumulative_returns <- data.frame(Period = character(), Cumulative_Return = numeric())
# Loop through each period in the range
for (start in seq(start_year, end_year - testing_period + 1)) {
end <- start + testing_period - 1
period_start_date <- paste0(start, "-01-01")
period_end_date <- paste0(end, "-12-31")
# Call Function 1 to run the backtest for this period
period_result <- base_level_backtest(ticker, period_start_date, period_end_date, dvi_threshold)
# Store the results in the list
all_results[[paste0(start, "-", end)]] <- period_result
# Store the cumulative return for this period for plotting
cumulative_returns <- rbind(cumulative_returns, data.frame(
Period = paste0(start, "-", end),
Cumulative_Return = period_result$Cumulative_Return
))
}
# Create a data frame to store the summarized results
summary_df <- data.frame(
Period = character(),
Total_Long_Trades = numeric(),
Total_Short_Trades = numeric(),
Percent_Long = numeric(),
Percent_Short = numeric(),
Cumulative_Return = numeric()
)
# Loop over all the results and calculate the mean values
for (period in names(all_results)) {
result <- all_results[[period]]
# Add the period results to the summary data frame
summary_df <- rbind(summary_df, data.frame(
Period = period,
Total_Long_Trades = result$Total_Long_Trades,
Total_Short_Trades = result$Total_Short_Trades,
Percent_Long = result$Percent_Long,
Percent_Short = result$Percent_Short,
Cumulative_Return = result$Cumulative_Return
))
}
# Calculate the average of each metric over all periods
summary_means <- colMeans(summary_df[, -1], na.rm = TRUE)
summary_df <- rbind(summary_df, c("Average", summary_means))
# Explicitly print the cumulative returns plot
plot_cumulative_return <- ggplot(cumulative_returns, aes(x = Period, y = Cumulative_Return)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Cumulative Return for Each Backtest Period", x = "Period", y = "Cumulative Return") +
theme_minimal()
print(plot_cumulative_return)  # Explicitly print the plot
# Return the summary table
return(summary_df)
}
# Example: Run simulation for "JNJ" with 3-year periods, data from 2010 to 2016, and DVI threshold 0.5
simulation_results <- simulate_multiple_backtests("JNJ", 3, c("2010", "2016"), 0.5)
print(simulation_results)
# Function 3: Simulate Multiple DVI Thresholds
simulate_multiple_dvi_thresholds <- function(ticker, start_date, end_date, low_threshold, high_threshold, increment = 0.01) {
# Create a sequence of DVI thresholds from low to high with the given increment
dvi_thresholds <- seq(low_threshold, high_threshold, by = increment)
# Create an empty list to store results for each threshold
all_results <- list()
# Loop through each DVI threshold and perform backtest
for (threshold in dvi_thresholds) {
# Call Function 1 to run the backtest for the current DVI threshold
result <- base_level_backtest(ticker, start_date, end_date, threshold)
# Store the results in the list
all_results[[as.character(threshold)]] <- result
}
# Create a data frame to store the summarized results
summary_df <- data.frame(
DVI_Threshold = numeric(),
Total_Long_Trades = numeric(),
Total_Short_Trades = numeric(),
Cumulative_Return = numeric()
)
# Loop over all the results and extract relevant data
for (threshold in names(all_results)) {
result <- all_results[[threshold]]
# Add the threshold results to the summary data frame
summary_df <- rbind(summary_df, data.frame(
DVI_Threshold = as.numeric(threshold),
Total_Long_Trades = result$Total_Long_Trades,
Total_Short_Trades = result$Total_Short_Trades,
Cumulative_Return = result$Cumulative_Return
))
}
# Plot the results using ggplot2
ggplot(summary_df, aes(x = DVI_Threshold, y = Cumulative_Return)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "red") +
labs(title = "Cumulative Return vs DVI Threshold", x = "DVI Threshold", y = "Cumulative Return") +
theme_minimal()
# Return the summary table
return(summary_df)
}
# Example: Run simulation for "JNJ" from 2014-01-01 to 2017-12-31, testing DVI thresholds from 0.4 to 0.6 with increments of 0.01
dvi_results <- simulate_multiple_dvi_thresholds("JNJ", "2014-01-01", "2017-12-31", 0.4, 0.6, 0.01)
print(dvi_results)
# Function 3: Simulate Multiple DVI Thresholds
simulate_multiple_dvi_thresholds <- function(ticker, start_date, end_date, low_threshold, high_threshold, increment = 0.01) {
# Create a sequence of DVI thresholds from low to high with the given increment
dvi_thresholds <- seq(low_threshold, high_threshold, by = increment)
# Create an empty list to store results for each threshold
all_results <- list()
# Loop through each DVI threshold and perform backtest
for (threshold in dvi_thresholds) {
# Call Function 1 to run the backtest for the current DVI threshold
result <- base_level_backtest(ticker, start_date, end_date, threshold)
# Store the results in the list
all_results[[as.character(threshold)]] <- result
}
# Create a data frame to store the summarized results
summary_df <- data.frame(
DVI_Threshold = numeric(),
Total_Long_Trades = numeric(),
Total_Short_Trades = numeric(),
Cumulative_Return = numeric()
)
# Loop over all the results and extract relevant data
for (threshold in names(all_results)) {
result <- all_results[[threshold]]
# Add the threshold results to the summary data frame
summary_df <- rbind(summary_df, data.frame(
DVI_Threshold = as.numeric(threshold),
Total_Long_Trades = result$Total_Long_Trades,
Total_Short_Trades = result$Total_Short_Trades,
Cumulative_Return = result$Cumulative_Return
))
}
# Plot the results using ggplot2
plot <- ggplot(summary_df, aes(x = DVI_Threshold, y = Cumulative_Return)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "red") +
labs(title = "Cumulative Return vs DVI Threshold", x = "DVI Threshold", y = "Cumulative Return") +
theme_minimal()
# Explicitly print the plot to ensure it is displayed
print(plot)
# Return the summary table
return(summary_df)
}
# Example: Run simulation for "JNJ" from 2014-01-01 to 2017-12-31, testing DVI thresholds from 0.4 to 0.6 with increments of 0.01
dvi_results <- simulate_multiple_dvi_thresholds("JNJ", "2014-01-01", "2017-12-31", 0.4, 0.6, 0.01)
print(dvi_results)
# Function 3: Simulate Multiple DVI Thresholds
simulate_multiple_dvi_thresholds <- function(ticker, start_date, end_date, low_threshold, high_threshold, increment = 0.01) {
# Create a sequence of DVI thresholds from low to high with the given increment
dvi_thresholds <- seq(low_threshold, high_threshold, by = increment)
# Create an empty list to store results for each threshold
all_results <- list()
# Loop through each DVI threshold and perform backtest
for (threshold in dvi_thresholds) {
# Call Function 1 to run the backtest for the current DVI threshold
result <- base_level_backtest(ticker, start_date, end_date, threshold)
# Store the results in the list
all_results[[as.character(threshold)]] <- result
}
# Create a data frame to store the summarized results
summary_df <- data.frame(
DVI_Threshold = numeric(),
Total_Long_Trades = numeric(),
Total_Short_Trades = numeric(),
Cumulative_Return = numeric()
)
# Loop over all the results and extract relevant data
for (threshold in names(all_results)) {
result <- all_results[[threshold]]
# Add the threshold results to the summary data frame
summary_df <- rbind(summary_df, data.frame(
DVI_Threshold = as.numeric(threshold),
Total_Long_Trades = result$Total_Long_Trades,
Total_Short_Trades = result$Total_Short_Trades,
Cumulative_Return = result$Cumulative_Return
))
}
# Plot the results using ggplot2
plot <- ggplot(summary_df, aes(x = DVI_Threshold, y = Cumulative_Return)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "red") +
# Add data labels to the points
geom_text(aes(label = round(Cumulative_Return, 4)), vjust = -0.5, color = "black", size = 3) +
labs(title = "Cumulative Return vs DVI Threshold", x = "DVI Threshold", y = "Cumulative Return") +
theme_minimal()
# Explicitly print the plot to ensure it is displayed
print(plot)
# Return the summary table
return(summary_df)
}
# Example: Run simulation for "JNJ" from 2014-01-01 to 2017-12-31, testing DVI thresholds from 0.4 to 0.6 with increments of 0.01
dvi_results <- simulate_multiple_dvi_thresholds("JNJ", "2014-01-01", "2017-12-31", 0.4, 0.6, 0.01)
print(dvi_results)
# Load necessary libraries
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library(ggplot2)
# Function to get stock data
get_stock_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
# Function for Base Level Backtest
base_level_backtest <- function(ticker, start_date, end_date, dvi_threshold = 0.5) {
# Load data
price_data <- get_stock_data(ticker, start_date, end_date)
# Calculate DVI (using RSI as a proxy)
dvi <- RSI(Cl(price_data), n = 14) / 100  # Normalize RSI to [0,1]
# Create trading signal (1 for long, -1 for short)
signal <- Lag(ifelse(dvi < dvi_threshold, 1, -1))  # Lag to avoid look-ahead bias
# Calculate daily returns and strategy returns
daily_returns <- ROC(Cl(price_data))
strategy_returns <- daily_returns * signal
strategy_returns <- na.omit(strategy_returns)
# Summary statistics
long_trades <- sum(signal == 1, na.rm = TRUE)
short_trades <- sum(signal == -1, na.rm = TRUE)
percent_long <- mean(signal == 1, na.rm = TRUE) * 100
percent_short <- mean(signal == -1, na.rm = TRUE) * 100
cumulative_return <- prod(1 + strategy_returns) - 1
# Results
summary_results <- data.frame(
Total_Long_Trades = long_trades,
Total_Short_Trades = short_trades,
Percent_Long = percent_long,
Percent_Short = percent_short,
Cumulative_Return = cumulative_return
)
# Plot equity curve
cumulative_equity_curve <- exp(cumsum(strategy_returns))
# Explicitly print the plot to ensure it is displayed
print(plot(cumulative_equity_curve, type = "l", col = "blue",
main = "Cumulative Return from SMA Strategy",
xlab = "Time", ylab = "Cumulative Return"))
return(summary_results)
}
# Example: Run backtest for "JNJ" from 2014-01-01 to 2017-12-31 with default DVI threshold of 0.5
results <- base_level_backtest("JNJ", "2014-01-01", "2017-12-31", 0.5)
print(results)
# Return the summary table
return(summary_df)
# Simulate Multiple Backtest Periods
simulate_multiple_backtests <- function(ticker, testing_period, date_range, dvi_threshold = 0.5) {
# Extract start and end years from date_range
start_year <- as.numeric(date_range[1])
end_year <- as.numeric(date_range[2])
# Create an empty list to store the results from each period
all_results <- list()
# Create a vector to store cumulative returns for plotting
cumulative_returns <- data.frame(Period = character(), Cumulative_Return = numeric())
# Loop through each period in the range
for (start in seq(start_year, end_year - testing_period + 1)) {
end <- start + testing_period - 1
period_start_date <- paste0(start, "-01-01")
period_end_date <- paste0(end, "-12-31")
# Call Function 1 to run the backtest for this period
period_result <- base_level_backtest(ticker, period_start_date, period_end_date, dvi_threshold)
# Store the results in the list
all_results[[paste0(start, "-", end)]] <- period_result
# Store the cumulative return for this period for plotting
cumulative_returns <- rbind(cumulative_returns, data.frame(
Period = paste0(start, "-", end),
Cumulative_Return = period_result$Cumulative_Return
))
}
# Create a data frame to store the summarized results
summary_df <- data.frame(
Period = character(),
Total_Long_Trades = numeric(),
Total_Short_Trades = numeric(),
Percent_Long = numeric(),
Percent_Short = numeric(),
Cumulative_Return = numeric()
)
# Loop over all the results and calculate the mean values
for (period in names(all_results)) {
result <- all_results[[period]]
# Add the period results to the summary data frame
summary_df <- rbind(summary_df, data.frame(
Period = period,
Total_Long_Trades = result$Total_Long_Trades,
Total_Short_Trades = result$Total_Short_Trades,
Percent_Long = result$Percent_Long,
Percent_Short = result$Percent_Short,
Cumulative_Return = result$Cumulative_Return
))
}
# Calculate the average of each metric over all periods
summary_means <- colMeans(summary_df[, -1], na.rm = TRUE)
summary_df <- rbind(summary_df, c("Average", summary_means))
# Explicitly print the cumulative returns plot
plot_cumulative_return <- ggplot(cumulative_returns, aes(x = Period, y = Cumulative_Return)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Cumulative Return for Each Backtest Period", x = "Period", y = "Cumulative Return") +
theme_minimal()
print(plot_cumulative_return)  # Explicitly print the plot
# Return the summary table
return(summary_df)
}
# Example: Run simulation for "JNJ" with 3-year periods, data from 2010 to 2016, and DVI threshold 0.5
simulation_results <- simulate_multiple_backtests("JNJ", 3, c("2010", "2016"), 0.5)
print(simulation_results)
# Simulate Multiple DVI Thresholds
simulate_multiple_dvi_thresholds <- function(ticker, start_date, end_date, low_threshold, high_threshold, increment = 0.01) {
# Create a sequence of DVI thresholds from low to high with the given increment
dvi_thresholds <- seq(low_threshold, high_threshold, by = increment)
# Create an empty list to store results for each threshold
all_results <- list()
# Loop through each DVI threshold and perform backtest
for (threshold in dvi_thresholds) {
# Call Function 1 to run the backtest for the current DVI threshold
result <- base_level_backtest(ticker, start_date, end_date, threshold)
# Store the results in the list
all_results[[as.character(threshold)]] <- result
}
# Create a data frame to store the summarized results
summary_df <- data.frame(
DVI_Threshold = numeric(),
Total_Long_Trades = numeric(),
Total_Short_Trades = numeric(),
Cumulative_Return = numeric()
)
# Loop over all the results and extract relevant data
for (threshold in names(all_results)) {
result <- all_results[[threshold]]
# Add the threshold results to the summary data frame
summary_df <- rbind(summary_df, data.frame(
DVI_Threshold = as.numeric(threshold),
Total_Long_Trades = result$Total_Long_Trades,
Total_Short_Trades = result$Total_Short_Trades,
Cumulative_Return = result$Cumulative_Return
))
}
# Plot the results using ggplot2
plot <- ggplot(summary_df, aes(x = DVI_Threshold, y = Cumulative_Return)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "red") +
# Add data labels to the points
geom_text(aes(label = round(Cumulative_Return, 4)), vjust = -0.5, color = "black", size = 3) +
labs(title = "Cumulative Return vs DVI Threshold", x = "DVI Threshold", y = "Cumulative Return") +
theme_minimal()
# Explicitly print the plot to ensure it is displayed
print(plot)
# Return the summary table
return(summary_df)
}
# Example: Run simulation for "JNJ" from 2014-01-01 to 2017-12-31, testing DVI thresholds from 0.4 to 0.6 with increments of 0.01
dvi_results <- simulate_multiple_dvi_thresholds("JNJ", "2014-01-01", "2017-12-31", 0.4, 0.6, 0.01)
print(dvi_results)
save.image("~/FINC-Assignment-2-Trading-Rule-Back-Testing/Assignment 2 Workspace.RData")
savehistory("~/FINC-Assignment-2-Trading-Rule-Back-Testing/Assignment 2 Script History.Rhistory")
